apiVersion: kargo.akuity.io/v1alpha1
kind: PromotionTask
metadata:
  name: promote
  namespace: workloads-infra-kargo
spec:
  vars:
  - name: repoURL
    value: GIT_CLUSTER_MGMT_URLGIT_ORG_NAME/eks-cluster-mgmt.git
  - name: branch
    value: main
  steps:
  # Clone the Git repository that contains the Kustomize configuration
  # to the ./src directory, and the environment configuration to ./out.
  - uses: git-clone
    config:
      repoURL: ${{ vars.repoURL }}
      # insecureSkipTLSVerify: true
      checkout:
      - commit: ${{ commitFrom(vars.repoURL).ID }}
        path: ./src
      - branch: env/${{ ctx.stage }}
        path: ./out
        # Create the branch if it does not exist.
        create: true
  # Following a "rendered branch" pattern, we delete all files in the
  # ./out directory to ensure that we only have the files that are
  # rendered from the Kustomize configuration in the ./src directory
  # of the repository after being rendered.
  - uses: git-clear
    config:
      path: ./out
  # Update the image in the Kustomize configuration located at ./src/env/<stage>
  # in the repository.
  - uses: kustomize-set-image
    as: update-image
    config:
      path: ./src/env/${{ ctx.stage }}
      images:
      - image: ${{ vars.image }}
        tag: ${{ imageFrom(vars.image).Tag}}
  # Build the Kustomize configuration in the ./src directory using the env/<stage>
  # overlay to the ./out directory.
  - uses: kustomize-build
    config:
      path: ./src/env/${{ ctx.stage }}
      outPath: ./out
  # Commit the changes to the Git repository.
  - uses: git-commit
    as: commit
    config:
      path: ./out
      message: ${{ task.outputs['update-image'].commitMessage }}
      author:
        name: Kargo
        email: kargo@example.com
  # Push the changes to the Git repository.
  - uses: git-push
    config:
      path: ./out
  # Request a sync of the ArgoCD Application to apply the changes from the
  # commit.
  - uses: argocd-update
    config:
      apps:
      - name: workloads-infra-${{ ctx.stage }}
        sources:
        - repoURL: ${{ vars.repoURL }}
          desiredRevision: ${{ task.outputs['commit'].commit }}
---
# apiVersion: kargo.akuity.io/v1alpha1
# kind: PromotionTask
# metadata:
#   name: promote-with-pr
#   namespace: workloads-infra-kargo
# spec:
#   vars:
#   - name: repoURL
#     value: GIT_CLUSTER_MGMT_URLGIT_ORG_NAME/GIT_CLUSTER_MGMT_URLGIT_ORG_NAME.git
#   - name: branch
#     value: main
#   steps:
#   # Clone the Git repository that contains the Kustomize configuration
#   # to the ./src directory, and the environment configuration to ./out.
#   - uses: git-clone
#     config:
#       repoURL: ${{ vars.repoURL }}
#       # insecureSkipTLSVerify: true
#       checkout:
#       - commit: ${{ commitFrom(vars.repoURL).ID }}
#         path: ./src
#       - branch: env/${{ ctx.stage }}
#         path: ./out
#         # Create the branch if it does not exist.
#         create: true
#   # Following a "rendered branch" pattern, we delete all files in the
#   # ./out directory to ensure that we only have the files that are
#   # rendered from the Kustomize configuration in the ./src directory
#   # of the repository after being rendered.
#   - uses: git-clear
#     config:
#       path: ./out
#   # Update the image in the Kustomize configuration located at ./src/env/<stage>
#   # in the repository.
#   - uses: kustomize-set-image
#     as: update-image
#     config:
#       path: ./src/env/${{ ctx.stage }}
#       images:
#       - image: ${{ vars.image }}
#         tag: ${{ imageFrom(vars.image).Tag}}
#   # Build the Kustomize configuration in the ./src directory using the env/<stage>
#   # overlay to the ./out directory.
#   - uses: kustomize-build
#     config:
#       path: ./src/env/${{ ctx.stage }}
#       outPath: ./out
#   # Commit the changes to the Git repository.
#   - uses: git-commit
#     as: commit
#     config:
#       path: ./out
#       message: ${{ task.outputs['update-image'].commitMessage }}
#       author:
#         name: Kargo
#         email: kargo@example.com
#   # Push the changes to the Git repository.
#   - uses: git-push
#     as: push
#     config:
#       path: ./out
#       generateTargetBranch: true
#   - uses: git-open-pr
#     as: open-pr
#     config:
#       repoURL: ${{ vars.repoURL }}
#       provider: gitea
#       # insecureSkipTLSVerify: true
#       createTargetBranch: true
#       sourceBranch: ${{ task.outputs['push'].branch }}
#       targetBranch: env/${{ ctx.stage }}
#   # Wait for the pull request to be merged.
#   - uses: git-wait-for-pr
#     as: wait-for-pr
#     config:
#       repoURL: ${{ vars.repoURL }}
#       provider: gitea
#       # insecureSkipTLSVerify: true
#       prNumber: ${{ task.outputs['open-pr'].prNumber }}
#   # Request a sync of the ArgoCD Application to apply the changes from the
#   # commit.
#   - uses: argocd-update
#     config:
#       apps:
#       - name: workloads-infra-${{ ctx.stage }}
#         sources:
#         - repoURL: ${{ vars.repoURL }}
#           desiredRevision: ${{ task.outputs['wait-for-pr'].commit }}
